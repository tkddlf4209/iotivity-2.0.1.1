'''
******************************************************************
*
* Copyright 2018 Samsung Electronics All Rights Reserved.
*
*
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
******************************************************************/
'''
##
# Build script for Linux
#
##

print '\n---------------Started Building RI for Linux---------------\n'

Import('env_linux')
import os

env_linux['CC'] = 'g++'

iotivity_root = env_linux.get('IOTIVITY_ROOT')
iotivity_lib_path = env_linux.get('IOTIVITY_LIB_PATH')
iotivity_lib_paths = [iotivity_lib_path, '.', '/usr/local/lib']
iotivity_test_root = env_linux.get('IOTIVITY_TEST_ROOT')
variant_dir = env_linux.get('VARIANT_DIR')
install_dir = env_linux.get('INSTALL_DIR')
test_src_root = iotivity_test_root + '/' + variant_dir
test = env_linux.get('TEST')
sdk = env_linux.get('SDK')
common_linux_cppflags = env_linux.get('COMMON_LINUX_CPPFLAGS')

install_targets = []

iotivity_include_paths = [
    iotivity_root + '/resource/include',
    iotivity_root + '/resource/csdk/include',
    iotivity_root + '/resource/csdk/stack/include',
    iotivity_root + '/resource/csdk/resource-directory/include',
    iotivity_root + '/resource/csdk/ocsocket/include',
    iotivity_root + '/resource/csdk/ocrandom/include',
    iotivity_root + '/resource/csdk/logger/include',
    iotivity_root + '/resource/csdk/logger/include/experimental',
    iotivity_root + '/resource/csdk/security/include',
    iotivity_root + '/resource/c_common',
    iotivity_root + '/resource/c_common/oic_malloc/include',
    iotivity_root + '/resource/oc_logger/include',
    iotivity_root + '/extlibs/cereal/include/',
    iotivity_root + '/extlibs/timer/',
    iotivity_root + '/extlibs/tinycbor/tinycbor/src/',
    iotivity_lib_path + '/resource/c_common'
]

testapp_include_paths = [ iotivity_test_root + '/include' ]

csdk_include_paths = [
    iotivity_test_root + '/include',
    test_src_root + '/tc/ri/gtest/csdk/include',
    iotivity_test_root + '/extlibs/gtest-1.7.0/include'
]

cpp_include_paths = [
    iotivity_test_root + '/include',
    test_src_root + '/tc/ri/gtest/cpp/include',
    iotivity_test_root + '/extlibs/gtest-1.7.0/include'
]

csdk_src = [
    Glob(test_src_root + '/tc/ri/gtest/csdk/src/btc/*.cpp'),
    Glob(test_src_root + '/tc/ri/gtest/csdk/src/stc/*.cpp'),
    Glob(test_src_root + '/tc/ri/gtest/csdk/src/helper/*.cpp')
]

cpp_src = [
    Glob(test_src_root + '/tc/ri/gtest/cpp/src/btc/*.cpp'),
    Glob(test_src_root + '/tc/ri/gtest/cpp/src/stc/*.cpp'),
    Glob(test_src_root + '/tc/ri/gtest/cpp/src/helper/*.cpp')
]

testapp_src = [
    test_src_root + '/common/commonutil/c_cpp/ResourceServer.cpp',
    test_src_root + '/common/commonutil/c_cpp/SampleResource.cpp',
    test_src_root + '/iBtestapp/modules/ri/c_cpp/InterOpAppRI.cpp',
]

common_defines = Split('WITH_TCP IP_ADAPTER NO_EDR_ADAPTER LE_ADAPTER ROUTING_EP WITH_BWT')

common_flags = Split('-s -pthread -march=native -std=gnu++0x -Wall -fpermissive')

testapp_shared_libs = Split('dl expat oc octbstack oc_logger connectivity_abstraction coap pthread glib-2.0 gcov')

csdk_shared_libs = Split('connectivity_abstraction octbstack ocsrm coap boost_system boost_filesystem boost_thread dl glib-2.0 routingmanager uuid rt c_common logger gio-2.0 gobject-2.0 gcov gtest pthread')
cpp_shared_libs = Split('connectivity_abstraction octbstack coap resource_directory boost_system boost_filesystem boost_thread dl expat oc oc_logger glib-2.0 gio-2.0 gobject-2.0 gcov gtest pthread')

if 'tc' in test:
    if 'csdk' in sdk:
        csdk_tc = env_linux.Program(
                    source = csdk_src,
                    target = 'iotivity_ri_csdk_test',
                    CPPPATH = iotivity_include_paths + csdk_include_paths,
                    LIBS = csdk_shared_libs + ['common_util', 'tc_util', 'dl'],
                    LIBPATH = [iotivity_lib_paths, iotivity_test_root + '/extlibs/gtest-1.7.0/bin/linux'],
                    RPATH = [iotivity_lib_paths],
                    CPPFLAGS = common_flags + common_linux_cppflags,
                    CPPDEFINES = common_defines)
        install_targets += [csdk_tc]

    if 'cpp' in sdk:
        cpp_tc = env_linux.Program(
                    source = cpp_src,
                    target = 'iotivity_ri_cpp_test',
                    CPPPATH = iotivity_include_paths + cpp_include_paths,
                    LIBS = cpp_shared_libs + ['common_util', 'tc_util', 'dl'],
                    LIBPATH = [iotivity_lib_paths, iotivity_test_root + '/extlibs/gtest-1.7.0/bin/linux'], 
                    RPATH = [iotivity_lib_paths],
                    CPPFLAGS = common_flags + common_linux_cppflags,
                    CPPDEFINES = common_defines)
        install_targets += [cpp_tc]

if 'app' in test:
    ri_interop_app = env_linux.Program(
                        source = testapp_src,
                        target = 'InterOpAppRI',
                        CPPPATH = iotivity_include_paths + testapp_include_paths,
                        LIBS = testapp_shared_libs,
                        LIBPATH = iotivity_lib_paths,
                        RPATH = iotivity_lib_paths,
                        CPPFLAGS = common_flags + common_linux_cppflags,
                        CPPDEFINES = common_defines)
    install_targets += [ri_interop_app]

default_targets = env_linux.Command('Copy_Security_dat_file', [], Copy('.', iotivity_root + '/resource/examples/oic_svr_db_server.dat'))

install = env_linux.Install(test_src_root, install_targets)

delete_bin = []
i = 0
for delete_target in install_targets:
    delete_bin += '0'
    delete_bin[i] = Command(str(i), [], Delete(delete_target))
    i = i + 1

default_targets += delete_bin + install

env_linux.Default(default_targets)
