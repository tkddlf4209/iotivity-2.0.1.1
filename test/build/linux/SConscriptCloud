'''
/******************************************************************
*
* Copyright 2016 Samsung Electronics All Rights Reserved.
*
*
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
******************************************************************/
'''
print '\n---------------Started Building Cloud Module for Linux---------------\n'

Import('env_linux')
import os

env_linux['CC'] = 'g++'

PROJECT_HOME = '../../'

VARIANT_DIR = env_linux['VARIANT_DIR']
IOTIVITY_ROOT = env_linux['ORG_SRC']
TARGET_ARCH = env_linux.get('TARGET_ARCH')
TARGET_SERVICE = env_linux.get('TARGET_SERVICE')
TARGET_TRANSPORT = env_linux.get('TARGET_TRANSPORT')
TARGET_TEST = env_linux.get('TARGET_TEST')
SECURED = env_linux.get('SECURED')
	
create_target_dir = env_linux.Command('target.out', [], Mkdir(VARIANT_DIR))
pre_job = [create_target_dir]
default_targets = [pre_job]
install_targets = []

if env_linux.get('RELEASE'):
	RELEASE_DIR = 'release'
else:
	RELEASE_DIR = 'debug'


IOTIVITY_LIB_PATH = IOTIVITY_ROOT + '/out/linux/' + TARGET_ARCH + '/' + RELEASE_DIR

arch_flag = ''
if TARGET_ARCH in ['x86']:
	env_linux.AppendUnique(CCFLAGS = ['-m32'])
	env_linux.AppendUnique(LINKFLAGS = ['-m32'])
	arch_flag = '-m32'
elif TARGET_ARCH in ['x86_64']:
	env_linux.AppendUnique(CCFLAGS = ['-m64'])
	env_linux.AppendUnique(LINKFLAGS = ['-m64'])
	arch_flag = '-m64'

IOTIVITY_INCLUDE_PATH = [
                            IOTIVITY_ROOT + '/resource/include',
                            IOTIVITY_ROOT + '/resource/csdk/stack/include',
                            IOTIVITY_ROOT + '/resource/csdk/ocrandom/include',
                            IOTIVITY_ROOT + '/resource/csdk/logger/include',
                            IOTIVITY_ROOT + '/resource/csdk/connectivity/inc',
                            IOTIVITY_ROOT + '/resource/csdk/connectivity/common/inc',
                            IOTIVITY_ROOT + '/resource/csdk/connectivity/lib/libcoap-4.1.1',
                            IOTIVITY_ROOT + '/resource/csdk/connectivity/api',
                            IOTIVITY_ROOT + '/resource/c_common/oic_malloc/include',
                            IOTIVITY_ROOT + '/resource/c_common',
                            IOTIVITY_ROOT + '/resource/c_common/oic_string/include',
                            IOTIVITY_ROOT + '/resource/c_common/oic_string/include',
                            IOTIVITY_ROOT + '/extlibs/cjson',
                            IOTIVITY_ROOT + '/extlibs/base64',
                            IOTIVITY_ROOT + '/extlibs/tinycbor/tinycbor/src',
                            IOTIVITY_ROOT + '/resource/oc_logger/include',
                            IOTIVITY_ROOT + '/resource/csdk/resource-directory/include',
                            IOTIVITY_LIB_PATH + '/resource/c_common'
                            ]

SECTEST_INCLUDE_PATH = [
                            PROJECT_HOME + '/include',
                            PROJECT_HOME + '/extlibs/gtest-1.7.0/include'
                       ]

TEST_APP_INCLUDE_PATH = [PROJECT_HOME + 'src/iBtestapp/modules/ic/c_cpp/include']

SIMULATOR_INCLUDE_PATH = []

LIB_PATH_LIST = [
                    IOTIVITY_LIB_PATH,
                    IOTIVITY_LIB_PATH + '/resource/csdk/logger',
                    IOTIVITY_LIB_PATH + '/resource/csdk/security/provisioning/ck_manager',
                    IOTIVITY_LIB_PATH + '/resource/csdk/security',
                    IOTIVITY_LIB_PATH + '/resource/c_common/',
                    IOTIVITY_LIB_PATH + '/resource/csdk/routing/',
                    PROJECT_HOME + '/extlibs/gtest-1.7.0/bin/linux'
                    ]

CLOUD_CPPDEFINES = ['-DWITH_CLOUD', '-DRD_CLIENT']
CLOUD_CXXFLAGS = ['-O2', '-g', '-Wall', '-Wextra', '-std=c++0x', '-pthread']

TEST_APP_SRC_LIST = [
				Glob(PROJECT_HOME + '/src/common/commonutil/c_cpp/CommonUtil.cpp'),
				Glob(PROJECT_HOME + '/src/common/commonutil/c_cpp/trace.c'),
				Glob(PROJECT_HOME + '/src/iBtestapp/modules/ic/c_cpp/src/*.cpp')
               ]

lib_list = Split('boost_system boost_filesystem boost_thread connectivity_abstraction coap dl gcov gio-2.0 gobject-2.0 glib-2.0 oc octbstack oc_logger octbstack pthread ')

if TARGET_TEST == None or 'app' in TARGET_TEST or 'all' in TARGET_TEST:

    cloud_test_app = env_linux.Program(source = TEST_APP_SRC_LIST + [ PROJECT_HOME + '/extlibs/gtest-1.7.0/bin/linux/libgtest.a' ],
                target = 'cloud_test_app',
                CPPPATH = IOTIVITY_INCLUDE_PATH + SECTEST_INCLUDE_PATH + TEST_APP_INCLUDE_PATH,
                LIBS = lib_list,
                LIBPATH = LIB_PATH_LIST,
                RPATH =  LIB_PATH_LIST,
                CPPDEFINES = CLOUD_CPPDEFINES,
                CXXFLAGS = CLOUD_CXXFLAGS)

    install_targets += cloud_test_app

if TARGET_TEST == None or 'app' in TARGET_TEST or 'all' in TARGET_TEST:
    cloud_res_path = PROJECT_HOME + '/src/iBtestapp/modules/ic/c_cpp/res'
    cloud_resource_list = Glob(cloud_res_path + '/*.*')

    default_targets += [create_target_dir]

    i = 0
    for cloud_res in cloud_resource_list:
    	copy_cloud_dir = env_linux.Command('copy_cloud_dir' + str(i), [], Copy(VARIANT_DIR, cloud_res))
    	i = i + 1
    	default_targets += [copy_cloud_dir]
    	
install = env_linux.Install(PROJECT_HOME + VARIANT_DIR, install_targets)

delete_bin = []
i = 0
for delete_target in install_targets:
    delete_bin += '0'
    delete_bin[i] = Command(str(i), [], Delete(delete_target))
    i = i + 1    

default_targets += install_targets + install + delete_bin

env_linux.Default(default_targets)
