'''
/******************************************************************
*
* Copyright 2018 Samsung Electronics All Rights Reserved.
*
*
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
******************************************************************/
'''
##
# Build script for Linux
#
##

print '\n---------------Started Building IotivitySecTest for Linux---------------\n'

Import('env_linux')
import os


env_linux['CC'] = 'g++'

iotivity_root = env_linux.get('IOTIVITY_ROOT')
iotivity_lib_path = env_linux.get('IOTIVITY_LIB_PATH')
iotivity_test_root = env_linux.get('IOTIVITY_TEST_ROOT')
variant_dir = env_linux.get('VARIANT_DIR')
install_dir = env_linux.get('INSTALL_DIR')
test_src_root = iotivity_test_root + '/' + variant_dir
test = env_linux.get('TEST')
common_linux_cppflags = env_linux.get('COMMON_LINUX_CPPFLAGS')

if env_linux.get('SECURED') == '1':
    secured = True
else:
    secured = False

install_targets = []
default_targets = []

iotivity_include_paths = [
    iotivity_root + '/resource/include',
    iotivity_root + '/resource/csdk/include',
    iotivity_root + '/resource/c_common',
    iotivity_root + '/resource/csdk/connectivity/common/inc',
    iotivity_root + '/resource/c_common/oic_string/include',
    iotivity_root + '/resource/c_common/oic_malloc/include',
    iotivity_root + '/resource/csdk/connectivity/lib/libcoap-4.1.1/include/',
    iotivity_root + '/resource/csdk/resource-directory/include',
    iotivity_root + '/resource/csdk/stack/include',
    iotivity_root + '/resource/csdk/ocsocket/include',
    iotivity_root + '/resource/c_common/ocrandom/include',
    iotivity_root + '/resource/csdk/logger/include',
    iotivity_root + '/resource/csdk/logger/include/experimental',
    iotivity_root + '/resource/oc_logger/include',
    iotivity_root + '/resource/extlibs/cereal/include/',
    iotivity_root + '/resource/extlibs/timer/',
    iotivity_root + '/service/easy-setup/inc',
    iotivity_root + '/service/easy-setup/enrollee/inc',
    iotivity_root + '/service/easy-setup/mediator/richsdk/inc',
    iotivity_root + '/service/easy-setup/enrollee/src',
    iotivity_root + '/service/easy-setup/mediator/richsdk/src',
    iotivity_root + '/resource/csdk/security/include',
    iotivity_root + '/resource/csdk/connectivity/api',
    iotivity_root + '/resource/csdk/security/provisioning/include',
    iotivity_root + '/resource/csdk/security/provisioning/include/internal',
    iotivity_root + '/resource/c_common/ocrandom/include',
    iotivity_root + '/resource/csdk/security/include',
    iotivity_root + '/resource/csdk/security/include/experimental',
    iotivity_root + '/resource/csdk/security/include/internal',
    iotivity_root + '/resource/csdk/security/provisioning/include',
    iotivity_root + '/resource/csdk/security/provisioning/include/internal',
    iotivity_root + '/resource/csdk/security/provisioning/include/oxm',
    iotivity_root + '/resource/csdk/security/provisioning/include/cloud',
    iotivity_root + '/extlibs/cjson',
    iotivity_root + '/extlibs/base64',
    iotivity_root + '/extlibs/tinycbor/tinycbor/src',
    iotivity_root + '/extlibs/mbedtls/mbedtls/include',
    iotivity_root + '/extlibs/tinydtls',
    iotivity_root + '/extlibs/mbedtls/mbedtls/include/mbedtls',
    iotivity_lib_path + '/resource/c_common'
]

enrollee_tc_include_paths = [
    iotivity_test_root + '/include',
    test_src_root + '/tc/es/gtest/include/enrollee',
    iotivity_test_root + '/extlibs/gtest-1.7.0/include',
]

mediator_tc_include_paths = [
    iotivity_test_root + '/include',
    test_src_root + '/tc/es/gtest/include/mediator',
    iotivity_test_root + '/extlibs/gtest-1.7.0/include',
]

enrollee_tc_src = [
    Glob(test_src_root + '/tc/es/gtest/src/helper/enrollee/*.cpp'),
    Glob(test_src_root + '/tc/es/gtest/src/btc/enrollee/*.cpp'),
    Glob(test_src_root + '/tc/es/gtest/src/stc/enrollee/*.cpp')
]

if secured:
    mediator_tc_src = [
        Glob(test_src_root + '/tc/es/gtest/src/helper/mediator/*.cpp'),
        Glob(test_src_root + '/tc/es/gtest/src/btc/mediator/ESCloudResourceTest.cpp'),
        Glob(test_src_root + '/tc/es/gtest/src/btc/mediator/ESEasySetupTest.cpp'),
        Glob(test_src_root + '/tc/es/gtest/src/btc/mediator/ESEnrolleeResourceTest.cpp'),
        Glob(test_src_root + '/tc/es/gtest/src/btc/mediator/ESEnrolleeSecurityTest.cpp'),
        Glob(test_src_root + '/tc/es/gtest/src/btc/mediator/ESRemoteEnrolleeTest.cpp'),
        Glob(test_src_root + '/tc/es/gtest/src/btc/mediator/ESRichCommonTest.cpp'),
        Glob(test_src_root + '/tc/es/gtest/src/stc/mediator/*.cpp')
]
else:
    mediator_tc_src = [
        Glob(test_src_root + '/tc/es/gtest/src/helper/mediator/*.cpp'),
        Glob(test_src_root + '/tc/es/gtest/src/btc/mediator/ESCloudResourceTest.cpp'),
        Glob(test_src_root + '/tc/es/gtest/src/btc/mediator/ESEasySetupTest.cpp'),
        Glob(test_src_root + '/tc/es/gtest/src/btc/mediator/ESEnrolleeResourceTest.cpp'),
        Glob(test_src_root + '/tc/es/gtest/src/btc/mediator/ESRemoteEnrolleeTest.cpp'),
        Glob(test_src_root + '/tc/es/gtest/src/btc/mediator/ESRichCommonTest.cpp'),
        Glob(test_src_root + '/tc/es/gtest/src/stc/mediator/*.cpp')
]

simulator_include_paths = [
    iotivity_test_root + '/include',
    iotivity_root + '/service/easy-setup/sampleapp/enrollee/linux/'
]

simulator_tc_src = [
    test_src_root + '/testapp/es/essim.c',
    iotivity_root + '/service/easy-setup/sampleapp/enrollee/linux/easysetup_x.c'
]
cppflags = Split('-s -pthread -march=native -std=gnu++0x -pthread -Wall -fpermissive -DWITH_TCP')

pkg_flags = Split('`pkg-config --cflags --libs uuid`')

libs = Split('connectivity_abstraction octbstack coap boost_system boost_filesystem boost_thread expat oc oc_logger pthread glib-2.0 uuid gcov resource_directory gtest common_util tc_util pthread dl')

enrollee_libs =  [ 'ESEnrolleeSDK' ]
mediator_libs = [ 'ESMediatorRich']

if secured:
    cppflags.append('-D__WITH_DTLS__')
    mediator_libs.append('ocprovision')

env_linux.ParseConfig("pkg-config --cflags --libs uuid")
env_linux.AppendUnique(CPPFLAGS = pkg_flags)

if 'tc' in test:
    enrollee_tc = env_linux.Program(source = enrollee_tc_src, 
                            target = 'iotivity_es_enrollee_test', 
                            CPPPATH = iotivity_include_paths + enrollee_tc_include_paths, 
                            LIBS = libs + enrollee_libs, 
                            RPATH = iotivity_lib_path,
                            LIBPATH = [iotivity_lib_path, iotivity_test_root + '/extlibs/gtest-1.7.0/bin/linux/', '.'], 
                            CPPFLAGS = cppflags + common_linux_cppflags)
    install_targets += enrollee_tc

    mediator_tc = env_linux.Program(source = mediator_tc_src, 
                            target = 'iotivity_es_mediator_test', 
                            CPPPATH = iotivity_include_paths + mediator_tc_include_paths,
                            LIBS = libs + mediator_libs, 
                            RPATH = iotivity_lib_path,
                            LIBPATH = [iotivity_lib_path, iotivity_test_root + '/extlibs/gtest-1.7.0/bin/linux/', '.'], 
                            CPPFLAGS = cppflags + common_linux_cppflags)
    install_targets += mediator_tc

if 'tc' in test or 'simulator' in test:
    es_simulator = env_linux.Program(source = simulator_tc_src,
                            target = 'iotivity_es_simulator',
                            CPPPATH = iotivity_include_paths + simulator_include_paths,
                            LIBS = libs + mediator_libs + enrollee_libs,
                            RPATH = iotivity_lib_path,
                            LIBPATH = [iotivity_lib_path, iotivity_test_root + '/extlibs/gtest-1.7.0/bin/linux/', '.'], 
                            CPPFLAGS = cppflags + common_linux_cppflags)
    install_targets += es_simulator                            

install_bin = env_linux.Install(iotivity_test_root + '/' + install_dir, install_targets)

delete_bin = []
i = 0
for delete_target in install_targets:
    delete_bin.append(Command(str(i), [], Delete(delete_target)))
    i = i +1

default_targets = install_bin + delete_bin

env_linux.Default(default_targets)
