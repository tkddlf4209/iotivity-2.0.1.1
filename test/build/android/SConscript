'''
/******************************************************************
*
* Copyright 2018 Samsung Electronics All Rights Reserved.
*
*
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
******************************************************************/
'''
##
# The build script for Android
#
##

import os
import os.path

print '\n---------------Started Building IotivitySecTest for Android---------------\n'

Import('env_android')

iotivity_root = env_android.get('IOTIVITY_ROOT')

if not env_android.get('ANDROID_HOME'):
    if os.path.exists(iotivity_root + '/extlibs/android/sdk/android-sdk-linux'):
        env_android.Replace(ANDROID_HOME = iotivity_root + '/extlibs/android/sdk/android-sdk-linux')
    else:
        env_android.Replace(ANDROID_HOME = os.environ.get('ANDROID_HOME'))

if not env_android.get('ANDROID_NDK'):
    if os.path.exists(iotivity_root + '/extlibs/android/ndk/android-ndk-r10d'):
        env_android.Replace(ANDROID_NDK = iotivity_root + '/extlibs/android/ndk/android-ndk-r10d')
    else:
        env_android.Replace(ANDROID_NDK = os.environ.get('ANDROID_NDK'))

if not env_android.get('ANDROID_GRADLE'):
    if os.path.isfile(iotivity_root + '/extlibs/android/gradle/gradle-2.2.1/bin/gradle'):
        env_android.Replace(ANDROID_GRADLE = iotivity_root + '/extlibs/android/gradle/gradle-2.2.1/bin/gradle')
    else:
        env_android.Replace(ANDROID_GRADLE = os.environ.get('ANDROID_GRADLE'))

target_arch = env_android.get('TARGET_ARCH')
module = env_android.get('MODULE')
test = env_android.get('test')
target_transport = ARGUMENTS.get('TARGET_TRANSPORT')
secured = env_android.get('SECURED')
iotivity_root = env_android.get('IOTIVITY_ROOT')
iotivity_test_root = env_android.get('IOTIVITY_TEST_ROOT')
release_dir=env_android.get('RELEASE_DIR')
all_modules = env_android.get('ALL_MODULES')
test = env_android.get('TEST')
gradle_bin = env_android.get('ANDROID_GRADLE')
ndk_dir = env_android.get('ANDROID_NDK')
sdk_dir = env_android.get('ANDROID_HOME')

push = env_android.get('PUSH')
push = ",".join(push)

framework = env_android.get('FRAMEWORK')
cloud_service_build = env_android.get('CLOUD_SERVICE')
kafka_root = env_android.get('KAFKA_ROOT')

print sdk_dir
print ndk_dir
print gradle_bin
print push

if not os.path.exists(sdk_dir):
    print 'No valid ANDROID_HOME found'
    exit(-1)

if not os.path.exists(ndk_dir):
    print 'No valid ANDROID_NDK found'
    exit(-1)

if not os.path.isfile(gradle_bin):
    print 'No valid ANDROID_GRADLE found'
    exit(-1)

os.environ['ANDROID_HOME'] = sdk_dir

default_targets = []

if cloud_service_build:
    if 'ic' in module or 'cs' in module:
        build_command = 'bash ' + iotivity_test_root + '/res/cloud_resource/cloud_build.sh ' + kafka_root + ' ' + iotivity_root
        cloud_build = env_android.Command('cloud_build', None, build_command)
        default_targets += [cloud_build]

for temp in list(set(all_modules) - set(['iut', 'ca'])):

    if temp in module:

        jdk_env = Environment(ENV=os.environ)
        build_command = gradle_bin + ' ' + 'install' + ' -b ' + iotivity_test_root + '/build/android/build.gradle -Pmodule_name=%s \
        -Parch=%s -Prelease=%s -Piotivity_root=%s  -Pp=%s -Ptest_root=%s -Psrc_type=%s -Ptest=%s' \
        %(temp, target_arch, release_dir, iotivity_root, iotivity_test_root + '/build/android/', iotivity_test_root, "android", test)

        print "Build Command:\n"
        print build_command

        if 'tc' in test:
            if temp == 'es' or temp == 're' or temp == 'pm':
                print "TCP Server"
                jdk_env['BUILDERS']['Gradle'] = Builder(action = gradle_bin + ' install -b' + iotivity_test_root + '/src/common/app/java/java-generic/TCPTestServer/build.gradle -PIOTIVITY_TEST_ROOT=' + iotivity_test_root)
                source_list = Glob(iotivity_test_root + '/src/common/commonutil/java/TCPTestServer/*.java')
                tcp_server = jdk_env.Gradle(target='tcp_server', source=source_list)
                default_targets += tcp_server

                print "TCP Client"
                jdk_env['BUILDERS']['Gradle'] = Builder(action = gradle_bin + ' installDebug -b' + iotivity_test_root + '/src/common/app/java/java-android/TCPAndroidClient/build.gradle -PIOTIVITY_TEST_ROOT=' + iotivity_test_root)
                source_list = Glob(iotivity_test_root + '/src/common/commonutil/java/TCPAndroidClient/*.java')
                tcp_client = jdk_env.Gradle(target='tcp_client', source=source_list)
                default_targets += tcp_client

            jdk_env['BUILDERS']['Gradle'] = Builder(action = build_command)
            source_list = Glob(iotivity_test_root + '/src/tc/' + temp + '/junit/*.java')
            junit_tc = jdk_env.Gradle(target='junit_tc', source=source_list)
            default_targets += junit_tc

        if 'app' in test:
            jdk_env['BUILDERS']['Gradle'] = Builder(action = build_command + ' -Papp')
            source_list = Glob(iotivity_test_root + '/src/iBtestapp/modules/' + temp + '/android' + '/junit/*.java')
            interop_app = jdk_env.Gradle(target='junit_tc', source=source_list)
            default_targets += interop_app

if 'iut' in module:
    security_mode = env_android.get('SECURITY_MODE')
    native_script = "bash build/android/iut/native_build.sh stand_alone=false ndk_path=%s push=%s security_mode=%s" % (ndk_dir, push, security_mode)
    default_targets += [native_script]
    native_build = env_android.Command('native_build', None, default_targets)
    env_android.Default(native_build)

if 'ca' in module:
    os.environ['ANDROID_HOME'] = sdk_dir
    jdk_env = Environment(ENV=os.environ)

    CURRENT_PATH = Dir('.').srcnode().abspath

    if 'gtest' in framework:

        param = "clean=0"
        if push:
            param += " push=" + push
        param += " android_home=%s android_ndk=%s release_dir=%s target_arch=%s iotivity_root=%s iotivity_test_root=%s" % (sdk_dir, ndk_dir, release_dir, target_arch, iotivity_root, iotivity_test_root)
        cagtest_build_script = "bash build/android/ca/gtest/native_build.sh " + param
        cagtest_native_build = env_android.Command('cagtest_native_build', None, cagtest_build_script)
        default_targets += cagtest_native_build

    if 'junit' in framework:
        if 'tc' in test:
            build_command = "bash build/android/ca/junit/native_build.sh \
            test=tc stand_alone=0 android_ndk=%s release=%s target_arch=%s iotivity_root=%s test_root=%s"\
             % (ndk_dir, release_dir, target_arch, iotivity_root, iotivity_test_root)

            ca_tc_native_build = env_android.Command('ca_tc_native_build', None, build_command)
            default_targets += ca_tc_native_build

            build_command = gradle_bin + ' ca -b' + iotivity_test_root + '/build/android/build.gradle -Pmodule_name=%s \
            -Parch=%s -Prelease=%s -Piotivity_root=%s  -Pp=%s -Ptest_root=%s -Psrc_type=%s -Ptest=%s' \
            %('ca', target_arch, release_dir, iotivity_root, iotivity_test_root + '/build/android/', iotivity_test_root, "android", test)

            jdk_env['BUILDERS']['Gradle'] = Builder(action = build_command)
            source_list = Glob(iotivity_test_root + '/src/tc/ca/junit/*.java')
            cajunit_gradle_build = jdk_env.Gradle(target='cajunit_gradle_build', source=source_list)
            default_targets += cajunit_gradle_build

        if 'tc' in test or 'simulator' in test:
            build_command = "bash build/android/ca/junit/native_build.sh test=simulator stand_alone=0 android_ndk=%s release=%s target_arch=%s iotivity_root=%s iotivity_test_root=%s" % (ndk_dir, release_dir, target_arch, iotivity_root, iotivity_test_root)
            default_targets += env_android.Command('ca_simulator_native_build', None, build_command)

            build_command = gradle_bin + ' installDebug -b' + iotivity_test_root + '/src/testapp/ca/android/casimulator/build.gradle -PTARGET_ARCH=%s -PRELEASE=%s -PANDROID_NDK=%s -PIOTIVITY_ROOT=%s' %(target_arch, release_dir, ndk_dir, iotivity_root)

            jdk_env['BUILDERS']['Gradle'] = Builder(action = build_command)
            source_list = Glob(iotivity_test_root + 'src/testapp/ca/android/casimulator/*.java')
            ca_simulator_gradle_build = jdk_env.Gradle(target = 'ca_simulator_gradle_build', source = source_list)
            default_targets += ca_simulator_gradle_build

env_android.Default(default_targets)
