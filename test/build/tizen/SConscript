'''
/******************************************************************
*
* Copyright 2016 Samsung Electronics All Rights Reserved.
*
*
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
******************************************************************/
'''
##
# The build script for Tizen
#
##

import os
import os.path

print '\n---------------Started Building for Tizen---------------\n'

Import('env_tizen')

iotivity_root = env_tizen.get('IOTIVITY_ROOT')
iotivity_test_root = env_tizen.get('IOTIVITY_TEST_ROOT')
module = env_tizen.get('MODULE')
test = env_tizen.get('TEST')
variant_dir = env_tizen.get('VARIANT_DIR')
gbs_root = env_tizen.get('GBS_ROOT')
version = env_tizen.get('PROJECT_VERSION')
prevent = env_tizen.get('PREVENT')
target_transport = env_tizen.get('TARGET_TRANSPORT')
secured = env_tizen.get('SECURED')
push = env_tizen.get('PUSH')
sdk = env_tizen.get('SDK')
tizen_home = env_tizen.get('TIZEN_HOME')
target_arch = env_tizen.get('TARGET_ARCH')
offline = env_tizen.get('OFFLINE')
all_modules = env_tizen.get('ALL_MODULES')
cloud_service_build = env_tizen.get('CLOUD_SERVICE')
tls_mode = env_tizen.get('TLS_MODE')
kafka_root = env_tizen.get('KAFKA_ROOT')

if gbs_root is None or not os.path.isdir(gbs_root):
    print 'Set Proper GBS Root Path'
    exit(1)

rpms_path = gbs_root + '/local/repos/tizen/' + target_arch + '/RPMS'

if not os.path.isdir(rpms_path):
    print 'Invalid RPMS path: ' + rpms_path
    exit(1)

tizen_sdb = ''

if push:
    if tizen_home is None or not os.path.isdir(tizen_home):
        tizen_home = os.environ.get('TIZEN_HOME')
        if not os.path.isdir(tizen_home):
            print 'No Tizen_HOME found'
            exit(-1)
        env_tizen.Replace(TIZEN_HOME = tizen_home)


    tizen_sdb = tizen_home + '/tools/sdb'

    if not os.path.isfile(tizen_sdb):
        print 'Invalid tizen_home: ' + tizen_home
        exit(1)

if offline:
    init_mode = '--noinit'
else:
    init_mode = ''

parameters = 'IOTIVITY_ROOT' + '=' + iotivity_root
parameters += ' ' + 'IOTIVITY_TEST_ROOT' + '=' + iotivity_test_root
parameters += ' ' + 'MODULE' + '=' + str(module)
parameters += ' ' + 'TARGET_ARCH' + '=' + str(target_arch)
parameters += ' ' + 'TEST' + '=' + '\"' + str(test) + '\"'
parameters += ' ' + 'VARIANT_DIR' + '=' + str(variant_dir)
parameters += ' ' + 'GBS_ROOT' + '=' + str(gbs_root)
parameters += ' ' + 'RPMS_PATH' + '=' + str(rpms_path)
if version:
    parameters += ' ' + 'PROJECT_VERSION' + '=' + str(version)
parameters += ' ' + 'TLS_MODE' + '=' + str(tls_mode)
parameters += ' ' + 'CLOUD_SERVICE' + '=' + str(cloud_service_build)
if kafka_root:
    parameters += ' ' + 'KAFKA_ROOT' + '=' + str(kafka_root)
parameters += ' ' + 'PREVENT' + '=' + str(prevent)
if target_transport:
    parameters += ' ' + 'TARGET_TRANSPORT' + '=' + '\"' + str(target_transport) + '\"'
parameters += ' ' + 'SECURED' + '=' + str(secured)
if push:
    parameters += ' ' + 'PUSH' + '=' + '\"' + str(push) + '\"'
parameters += ' ' + 'SDK' + '=' + '\"' + str(sdk) + '\"'
if tizen_home:
    parameters += ' ' + 'TIZEN_HOME' + '=' + str(tizen_home)
if tizen_sdb:
    parameters += ' ' + 'TIZEN_SDB' + '=' + str(tizen_sdb)
if offline:
    parameters += ' ' + 'OFFLINE' + '=--noinit'

default_targets = []

if os.path.isfile("../../extlibs/gtest-1.7.0/bin/tizen/libgtest.a"):
    print "Gtest library exists"
else:
    print "GTest library for Tizen does not exists, starts building for tizen"
    gbs_script_gtest = "bash extlibs/gtest-1.7.0/gbsbuild.sh %s %s %s %s %s %s" % (iotivity_root, iotivity_test_root, target_arch, gbs_root, rpms_path, init_mode)
    default_targets += [gbs_script_gtest]

if cloud_service_build:
    if 'ic' in module or 'cs' in module:
        cloud_build_command = 'bash ' + iotivity_test_root + '/res/cloud_resource/cloud_build.sh ' + kafka_root + ' ' + iotivity_root
        print cloud_build_command
        default_targets += [cloud_build_command]

for temp in all_modules:
    if temp in module:
        extra_parameters = ''
        test_res_files = ''

        lib_rpm_names = 'iotivity,iotivity-devel,iotivity-service'

        if temp == 'ca':
            lib_rpm_names = 'com-oic-ri'

        test_res_files = iotivity_test_root + '/res/common'

        if temp == 'rc':
            test_res_files += ',' + iotivity_test_root + '/res/resource_container_xml'
        if temp == 'pm':
            test_res_files += ',' + iotivity_test_root + '/res/pm_resource'
        if temp == 'ic' or temp == 'cs':
            test_res_files += ',' + iotivity_test_root + '/res/cloud_resource'
        if temp == 'ri':
            test_res_files += ',' + iotivity_root + '/resource/examples/oic_svr_db_server.dat'

        extra_parameters += ' ' + 'lib_rpm_names' + '=' + lib_rpm_names

        if test_res_files:
            extra_parameters += ' ' + 'test_res_files' + '=' + test_res_files

        gbs_script = 'bash build/tizen/common/gbsbuild.sh ' + parameters + extra_parameters
        print gbs_script
        default_targets += [gbs_script]

gbs_build = env_tizen.Command('gbs_build', None, default_targets)

env_tizen.Default(gbs_build)
