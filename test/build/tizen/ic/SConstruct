'''
/******************************************************************
*
* Copyright 2016 Samsung Electronics All Rights Reserved.
*
*
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
******************************************************************/
'''

env = Environment(CC='g++')

test = ARGUMENTS.get('TEST')
SDK = ARGUMENTS.get('SDK')

iotivity_root = 'iotivity'
iotivity_test_root = 'test'

iotivity_include_paths = [
    iotivity_root + '/resource/include',
    iotivity_root + '/resource/csdk/include',
    iotivity_root + '/resource/c_common',
    iotivity_root + '/resource/csdk/stack/include',
    iotivity_root + '/resource/csdk/ocsocket/include',
    iotivity_root + '/resource/csdk/ocrandom/include',
    iotivity_root + '/resource/oc_logger/include',
    iotivity_root + '/resource/csdk/resource-directory/include',
    iotivity_root + '/extlibs/cereal/include',
    iotivity_root + '/extlibs/timer',
    iotivity_root + '/extlibs/timer/',
    iotivity_root + '/resource/c_common/oic_malloc/include',
    iotivity_root + '/resource/c_common/oic_string/include',
    iotivity_root + '/resource/csdk/logger/include',
    iotivity_root + '/extlibs/tinycbor/tinycbor/src',
    '/usr/include/dlog'
]

tc_include_paths = [
    iotivity_test_root + '/include',
    iotivity_test_root + '/src/tc/ic/gtest/include',
    iotivity_test_root + '/extlibs/gtest-1.7.0/include'
]

testapp_include_paths = [
    iotivity_test_root + '/include',
    iotivity_test_root + '/src/iBtestapp/modules/ic/c_cpp/include',
    iotivity_test_root + '/extlibs/gtest-1.7.0/include'
]

simulator_include_paths = [
    iotivity_test_root + '/include'
]

common_src = [ 
    iotivity_test_root + '/src/common/commonutil/c_cpp/CommonUtil.cpp',
    iotivity_test_root + '/src/common/commonutil/c_cpp/Configuration.cpp',
    iotivity_test_root + '/src/common/commonutil/c_cpp/CloudCommonUtil.cpp'
]

tc_src = [
    Glob(iotivity_test_root + '/src/tc/ic/gtest/src/btc/*.cpp'),
    Glob(iotivity_test_root + '/src/tc/ic/gtest/src/stc/*.cpp'),
    iotivity_test_root + '/src/common/testcase/gtest/IotivitySECTestMain.cpp',
    iotivity_test_root + '/src/common/commonutil/c_cpp/CommonTestUtil.cpp',
    Glob(iotivity_test_root + '/src/tc/ic/gtest/src/helper/*.cpp')
]

testapp_src = [
    Glob(iotivity_test_root + '/src/iBtestapp/modules/ic/c_cpp/src/*.cpp')
]

simulator_src = [
    iotivity_test_root + '/src/testapp/ic/iotivity_ic_server.cpp'
]

cloud_defines = ['WITH_CLOUD', 'MQ_BROKER', 'WITH_MQ','RD_CLIENT', 'MQ_PUBLISHER', 'MQ_SUBSCRIBER']

cppflags = Split('-s -pthread -std=gnu++0x -pthread -Wall -DTIZEN -fpermissive -D__TIZEN__')

libs = Split('libboost_system libboost_filesystem libboost_thread libdl libexpat liboc liboctbstack liboc_logger libconnectivity_abstraction pthread libglib-2.0 libdlog libresource_directory curl libcoap libuuid libpthread')

if 'tc' in test:
    env.Program(source = tc_src + common_src, 
                target = 'iotivity_ic_test', 
                CPPPATH = iotivity_include_paths + tc_include_paths, 
                LIBS = ['gtest'] + libs,
                LIBPATH = [iotivity_test_root + '/extlibs/gtest-1.7.0/bin/tizen', '.'],
                CPPDEFINES = cloud_defines,
                CPPFLAGS = cppflags)

if 'app' in test:
    env.Program(source = testapp_src + common_src, 
                target = 'iotivity_ic_app', 
                CPPPATH = iotivity_include_paths + testapp_include_paths, 
                LIBS = ['gtest'] + libs,
                LIBPATH = [iotivity_test_root + '/extlibs/gtest-1.7.0/bin/tizen', '.'],
                CPPDEFINES = cloud_defines,
                CPPFLAGS = cppflags)

if 'tc' in test or 'simulator' in test:
    env.Program(source= simulator_src + common_src,
              target='iotivity_ic_server',
              CPPPATH= iotivity_include_paths + simulator_include_paths,
              LIBS=libs,
              CPPDEFINES = cloud_defines,
              CPPFLAGS = cppflags)
