/******************************************************************
 *
 * Copyright 2018 Samsung Electronics All Rights Reserved.
 *
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ******************************************************************/

println "-----------------------------------------------------------------------"
println "----------------------------Gradle Java Main---------------------------"
println "-----------------------------------------------------------------------"

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'de.undercouch:gradle-download-task:1.0'
    }
}

import de.undercouch.gradle.tasks.download.Download

ext.javaExtLibDir = ""

def downLoadLinks=['https://github.com/downloads/jsankey/android-junit-report/android-junit-report-1.5.8.jar',
                   'https://repo1.maven.org/maven2/org/mockito/mockito-all/1.9.5/mockito-all-1.9.5.jar',
                   'https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/dexmaker/dexmaker-1.0.jar',
                   'https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/dexmaker/dexmaker-mockito-1.0.jar'
                   ]


/*
 *task to download junit library
 *if not exist download
*/
task checkCommonLibFiles(type:Download) {
    doFirst {
        mkdir(javaExtLibDir)
        src (downLoadLinks)
        overwrite false
        dest javaExtLibDir
    }
}


/*
 * task to build module
*/
task install(type: GradleBuild, dependsOn: ['checkCommonLibFiles']){
    startParameter.projectProperties = project.getGradle().getStartParameter().getProjectProperties()
    startParameter.projectProperties["testRoot"] =

    startParameter.projectProperties["buildType"] = "java"
    startParameter.projectProperties["iotivityRoot"]= "${iotivity_root}"
    startParameter.projectProperties["testRoot"] = "${test_root}"
    startParameter.projectProperties["moduleName"] = "${module_name}"
    startParameter.projectProperties["os"] = "${os}"
    startParameter.projectProperties["architecture"] = "${arch}"
    startParameter.projectProperties["logLevel"] = "${release}"
    startParameter.projectProperties["tcModuleDir"] = "${test_root}/src/tc/modules"
    startParameter.projectProperties["tcModuleRoot"] = "${test_root}/src/tc/${module_name}/junit/build.gradle"
    startParameter.projectProperties["binDirectory"] ="${test_root}/bin/${src_type}"
    startParameter.projectProperties["testCommonUtilSrcDirectory"] = "${test_root}/src/common/commonutil/${src_type}"
    startParameter.projectProperties["javaExtLibDir"]="${test_root}/extlibs/java/common/"
    startParameter.projectProperties["binDir"] = "${test_root}/bin/${src_type}/${module_name}"

    def junitJarFile = startParameter.projectProperties["javaExtLibDir"] + "/android-junit-report-1.5.8.jar"
    def mockitoallJarFile = startParameter.projectProperties["javaExtLibDir"] +  "/mockito-all-1.9.5.jar"
    def dexmakerJarFile = startParameter.projectProperties["javaExtLibDir"] +  "/dexmaker-1.0.jar"
    def dexmakermockitoJarFile = startParameter.projectProperties["javaExtLibDir"] +  "/dexmaker-mockito-1.0.jar"
    def moduleBuildFileDir = "${test_root}/src/tc"
    javaExtLibDir = startParameter.projectProperties["javaExtLibDir"]

    buildFile = startParameter.projectProperties["tcModuleRoot"]

    println "------------------------\nJava Project Properties\n------------------------"
    startParameter.projectProperties.each{ key, value -> println "    ${key} : ${value}" }

    tasks = ["${module_name}build".toString()]
}