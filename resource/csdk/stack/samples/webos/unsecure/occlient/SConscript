#******************************************************************
#
# Copyright (c) 2018 LG Electronics, Inc.
# Copyright 2014 Intel Mobile Communications GmbH All Rights Reserved.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Import('stacksamples_env')

samples_env = stacksamples_env.Clone()
SConscript('#build_common/thread.scons', exports={'thread_env': samples_env})

target_os = samples_env.get('TARGET_OS')
with_ra = samples_env.get('WITH_RA')

######################################################################
# Build flags
######################################################################
with_upstream_libcoap = samples_env.get('WITH_UPSTREAM_LIBCOAP')
if with_upstream_libcoap == '1':
    samples_env.AppendUnique(CPPPATH=['#/extlibs/libcoap/libcoap/include'])
else:
    samples_env.AppendUnique(CPPPATH=['#/resource/csdk/connectivity/lib/libcoap-4.1.1/include'])

samples_env.PrependUnique(CPPPATH=[
    '../../../../../logger/include',
    '../../../../../include',
    '../../../../../stack/include',
    '../../../../../connectivity/api',
    '../../../../../security/include',
    '../../../../../../../extlibs/boost/boost',
    '../../../../../../oc_logger/include',
    '../'
])

compiler = samples_env.get('CXX')
if 'g++' in compiler:
    samples_env.AppendUnique(CXXFLAGS=['-std=c++0x', '-Wall'])

samples_env.PrependUnique(LIBS=['coap'])

if target_os not in ['msys_nt', 'windows']:
    samples_env.PrependUnique(LIBS=['connectivity_abstraction'])

samples_env.PrependUnique(LIBS=['octbstack', 'ocsrm'])

if target_os in ['darwin']:
    samples_env.AppendUnique(LIBS=['routingmanager'])

if target_os not in ['windows', 'darwin', 'ios', 'msys_nt']:
    samples_env.AppendUnique(LIBS=['rt'])

if target_os not in ['windows']:
    samples_env.PrependUnique(LIBS=['m'])

if samples_env.get('SECURED') == '1':
    samples_env.AppendUnique(LIBS=['mbedtls'])

samples_env.AppendUnique(CPPDEFINES=['TB_LOG'])

samples_env.ParseConfig("pkg-config --cflags --libs glib-2.0")
samples_env.ParseConfig("pkg-config --cflags --libs luna-service2")
samples_env.ParseConfig("pkg-config --cflags --libs pbnjson_c")

######################################################################
# Source files and Targets
######################################################################
occlient = samples_env.Program('occlient', ['occlient.cpp', '../common.cpp'])

list_of_samples = [
    occlient
]

Alias("samples", list_of_samples)

samples_env.AppendTarget('samples')
